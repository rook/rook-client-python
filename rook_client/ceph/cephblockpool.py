"""
This file is automatically generated.
Do not modify.
"""

try:
    from typing import Any, Optional, Union, List
except ImportError:
    pass

from .._helper import _omit, CrdObject, CrdObjectList, CrdClass

class Replicated(CrdObject):
    _properties = [
        ('size', 'size', int, False, False),
        ('targetSizeRatio', 'targetSizeRatio', float, False, False),
        ('requireSafeReplicaSize', 'requireSafeReplicaSize', bool, False, False)
    ]        

    def __init__(self,
                 size=_omit,  # type: Optional[int]
                 targetSizeRatio=_omit,  # type: Optional[float]
                 requireSafeReplicaSize=_omit,  # type: Optional[bool]
                 ):
        super(Replicated, self).__init__(
            size=size,
            targetSizeRatio=targetSizeRatio,
            requireSafeReplicaSize=requireSafeReplicaSize,
        )

    @property
    def size(self):
        # type: () -> int
        return self._property_impl('size')
    
    @size.setter
    def size(self, new_val):
        # type: (Optional[int]) -> None
        self._size = new_val
    
    @property
    def targetSizeRatio(self):
        # type: () -> float
        return self._property_impl('targetSizeRatio')
    
    @targetSizeRatio.setter
    def targetSizeRatio(self, new_val):
        # type: (Optional[float]) -> None
        self._targetSizeRatio = new_val
    
    @property
    def requireSafeReplicaSize(self):
        # type: () -> bool
        return self._property_impl('requireSafeReplicaSize')
    
    @requireSafeReplicaSize.setter
    def requireSafeReplicaSize(self, new_val):
        # type: (Optional[bool]) -> None
        self._requireSafeReplicaSize = new_val


class ErasureCoded(CrdObject):
    _properties = [
        ('dataChunks', 'dataChunks', int, False, False),
        ('codingChunks', 'codingChunks', int, False, False)
    ]        

    def __init__(self,
                 dataChunks=_omit,  # type: Optional[int]
                 codingChunks=_omit,  # type: Optional[int]
                 ):
        super(ErasureCoded, self).__init__(
            dataChunks=dataChunks,
            codingChunks=codingChunks,
        )

    @property
    def dataChunks(self):
        # type: () -> int
        return self._property_impl('dataChunks')
    
    @dataChunks.setter
    def dataChunks(self, new_val):
        # type: (Optional[int]) -> None
        self._dataChunks = new_val
    
    @property
    def codingChunks(self):
        # type: () -> int
        return self._property_impl('codingChunks')
    
    @codingChunks.setter
    def codingChunks(self, new_val):
        # type: (Optional[int]) -> None
        self._codingChunks = new_val


class Spec(CrdObject):
    _properties = [
        ('failureDomain', 'failureDomain', str, False, False),
        ('replicated', 'replicated', Replicated, False, False),
        ('erasureCoded', 'erasureCoded', ErasureCoded, False, False),
        ('compressionMode', 'compressionMode', str, False, False),
        ('parameters', 'parameters', object, False, False)
    ]        

    def __init__(self,
                 failureDomain=_omit,  # type: Optional[str]
                 replicated=_omit,  # type: Optional[Replicated]
                 erasureCoded=_omit,  # type: Optional[ErasureCoded]
                 compressionMode=_omit,  # type: Optional[str]
                 parameters=_omit,  # type: Optional[Any]
                 ):
        super(Spec, self).__init__(
            failureDomain=failureDomain,
            replicated=replicated,
            erasureCoded=erasureCoded,
            compressionMode=compressionMode,
            parameters=parameters,
        )

    @property
    def failureDomain(self):
        # type: () -> str
        return self._property_impl('failureDomain')
    
    @failureDomain.setter
    def failureDomain(self, new_val):
        # type: (Optional[str]) -> None
        self._failureDomain = new_val
    
    @property
    def replicated(self):
        # type: () -> Replicated
        return self._property_impl('replicated')
    
    @replicated.setter
    def replicated(self, new_val):
        # type: (Optional[Replicated]) -> None
        self._replicated = new_val
    
    @property
    def erasureCoded(self):
        # type: () -> ErasureCoded
        return self._property_impl('erasureCoded')
    
    @erasureCoded.setter
    def erasureCoded(self, new_val):
        # type: (Optional[ErasureCoded]) -> None
        self._erasureCoded = new_val
    
    @property
    def compressionMode(self):
        # type: () -> str
        return self._property_impl('compressionMode')
    
    @compressionMode.setter
    def compressionMode(self, new_val):
        # type: (Optional[str]) -> None
        self._compressionMode = new_val
    
    @property
    def parameters(self):
        # type: () -> Any
        return self._property_impl('parameters')
    
    @parameters.setter
    def parameters(self, new_val):
        # type: (Optional[Any]) -> None
        self._parameters = new_val


class CephBlockPool(CrdClass):
    _properties = [
        ('apiVersion', 'apiVersion', str, True, False),
        ('metadata', 'metadata', object, True, False),
        ('status', 'status', object, False, False),
        ('spec', 'spec', Spec, True, False)
    ]        

    def __init__(self,
                 apiVersion,  # type: str
                 metadata,  # type: Any
                 spec,  # type: Spec
                 status=_omit,  # type: Optional[Any]
                 ):
        super(CephBlockPool, self).__init__(
            apiVersion=apiVersion,
            metadata=metadata,
            spec=spec,
            status=status,
        )

    @property
    def apiVersion(self):
        # type: () -> str
        return self._property_impl('apiVersion')
    
    @apiVersion.setter
    def apiVersion(self, new_val):
        # type: (str) -> None
        self._apiVersion = new_val
    
    @property
    def metadata(self):
        # type: () -> Any
        return self._property_impl('metadata')
    
    @metadata.setter
    def metadata(self, new_val):
        # type: (Any) -> None
        self._metadata = new_val
    
    @property
    def status(self):
        # type: () -> Any
        return self._property_impl('status')
    
    @status.setter
    def status(self, new_val):
        # type: (Optional[Any]) -> None
        self._status = new_val
    
    @property
    def spec(self):
        # type: () -> Spec
        return self._property_impl('spec')
    
    @spec.setter
    def spec(self, new_val):
        # type: (Spec) -> None
        self._spec = new_val
